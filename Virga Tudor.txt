1.Solutie Java pentru problema Ransom Note 383
//am folosit un hashmap (litera, numar aparitii) pentru ransomNote in care aflu frecventa fiecarei litere,mai apoi,pentru fiecare cheie gasita in magazine scad 1 din frecventa literei.
//Daca la final,frecventa fiecarei litere este 0,returnez true,altfel false.
class Solution {
    
    boolean can = true;
    HashMap<Character, Integer> letters = new HashMap<Character, Integer>();
    public boolean canConstruct(String ransomNote, String magazine) {
        int frequence;
        char c;
            
        for(int j = 0; j < ransomNote.length(); j++)
        {
            c = ransomNote.charAt(j);
            if(letters.containsKey(c))
            {
                frequence = letters.get(c);
                letters.put(c,frequence+1);
            }
            else{
                letters.put(c,1);
            }
            
        }
            
        for(int i = 0; i < magazine.length() ; i++){
            c = magazine.charAt(i);
            if(letters.containsKey(c))
            {
                frequence = letters.get(c);
                letters.put(c,frequence-1);
            }
        }
            
        for(int value : letters.values()){
            if(value > 0) can = false;
        }
        
        return can;  
    }
}

2.Solutie Java pentru problema Remove Duplicates from Sorted Array 26
//am folosit 2 indexuri,unul pentru a parcurge vectorul (i),iar altul (j) pentru a marca pozitia pe care ar trebui sa fie urmatorul numar
//cand 2 elemente au valori distincte,pun valoarea de la indexul i+1 pe pozitia j,iar apoi incrementez j-ul pentru urmatoarea valoare
class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0)
            return 0;
        int j = 1;
        for(int i = 0; i < nums.length-1 ; i++){
            if(nums[i] != nums[i+1]){
                
                nums[j] = nums[i+1];
                j++;
            }       
        }
        return j;    
    }
}

3.Solutie Java pentru problema Reverse String 344
//am folosit 2 indexuri,unul pentru prima jumatate a vectorului,al doilea pentru cealalta jumatate
//i-ul porneste de la sfarsitul vectorului,iar j-ul de la inceput,iar elementele de pe pozitiile i,respectiv j sunt interschimbate
class Solution {
    public void reverseString(char[] s) {
        int j=0;
        for (int i = s.length-1; i >= s.length/2; i--) {
            char aux = s[i];
            s[i] = s[j];
            s[j] = aux;
            j++;
        }
            
    }
}

